name: 'Matomo Tests'
description: 'Runs Matomo Tests'
inputs:
  test-type:
    description: "Type of tests to run"
    required: true
    default: PluginTests
  plugin-name:
    description: "Name of the plugin to test"
    required: false
  mysql-driver:
    description: "Mysql driver to use for testing. (Will be placed as config.ini.php setting)"
    required: false
    default: 'PDO_MYSQL'
  ui-test-options:
    description: "Additional options to run UI tests with"
    required: false
  phpunit-test-options:
    description: "Additional options to run PHPUnit with"
    required: false
  php-version:
    description: 'PHP version to set up for testing. Can be any version supported by shivammathur/setup-php'
    required: true
    default: ''
  node-version:
    description: 'Node version to set up for testing'
    required: false
    default: ''
  redis-service:
    description: "If true a redis master and sentinel will be set up before testing"
    required: false
    default: 'false'
  mysql-service:
    description: "If true a MySQL engine will be set up. "
    required: false
    default: 'true'
  mysql-engine:
    description: "MySQL database engine to use. Can be 'Mysql', 'Mariadb' or 'Tidb'"
    required: false
    default: 'Mysql'
  matomo-test-branch:
    description: "Branch or tag name of Matomo to run plugin tests for. This can be either a specific name or maximum_supported_matomo or minimum_required_matomo."
    required: false
    default: ''
  dependent-plugins:
    description: "Additional plugins to checkout before testing. space separated list of github slugs. e.g. matomo-org/pluginTasksTimetable"
    required: false
    default: ''
  github-token:
    description: "Token used to checkout dependent plugins. Only required if private repo needs to be checked out"
    required: false
    default: ''
  setup-script:
    description: "Additional setup script to run before starting tests. Can be used by plugin to e.g. set up LDAP or similar."
    required: false
    default: ''
  debug:
    description: "Verbose output"
    required: false
    default: 'false'
  coverage:
    description: "Add code coverage. Possible values are none (default), xdebug, pcov"
    required: false
    default: 'none'
  coverage-html-report:
    description: "Add code coverage html report as download. Possible values are false (default) or true"
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:

    - name: start mysql services
      if: inputs.mysql-service == 'true' && inputs.mysql-engine == 'Mysql'
      shell: bash
      run: |
        docker run --health-cmd='mysqladmin ping --silent' -d --tmpfs /var/lib/mysql:rw --tmpfs /bitnami/mysql/data:rw -v ${{ github.action_path }}/artifacts/my.cnf:/opt/bitnami/mysql/conf/my_custom.cnf:ro --name mysql -p 3306:3306 -e ALLOW_EMPTY_PASSWORD=yes -e MYSQL_DATABASE=matomo_tests bitnami/mysql:8.0
        sleep 20
        mysql -h127.0.0.1 -uroot -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES';SET GLOBAL wait_timeout = 36000;SET GLOBAL max_allowed_packet = 134209536;"

    - name: start mariadb services
      if: inputs.mysql-service == 'true' && inputs.mysql-engine == 'Mariadb'
      shell: bash
      run: |
        docker run -d --tmpfs /var/lib/mariadb:rw --tmpfs /bitnami/mariadb/data:rw -v ${{ github.action_path }}/artifacts/my.cnf:/opt/bitnami/mariadb/conf/my_custom.cnf:ro --name mariadb -p 3306:3306 -e ALLOW_EMPTY_PASSWORD=yes -e MARIADB_DATABASE=matomo_tests bitnami/mariadb:11.6
        sleep 10
        mysql -h127.0.0.1 -uroot -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES';SET GLOBAL wait_timeout = 36000;SET GLOBAL max_allowed_packet = 134209536;"

    - name: start tidb services
      if: inputs.mysql-service == 'true' && inputs.mysql-engine == 'Tidb'
      shell: bash
      run: |
        docker run -d -p 3306:4000 pingcap/tidb:latest
        sleep 10
        mysql -h127.0.0.1 -uroot -e "SET GLOBAL sql_mode = 'NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES';SET GLOBAL wait_timeout = 36000;SET GLOBAL max_allowed_packet = 134209536;CREATE DATABASE matomo_tests;"

    - name: start redis serivces
      if: inputs.redis-service == 'true'
      shell: bash
      run: |
        docker run -d --name redis -e ALLOW_EMPTY_PASSWORD=yes -p 6379:6379 bitnami/redis:latest
        docker run -d --name mymaster -e REDIS_MASTER_HOST=localhost -p 26379:26379 bitnami/redis-sentinel:latest

    - name: Setup PHP
      if: inputs.php-version != ''
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: bcmath, ldap, curl, zip, pdo_mysql, mysqli, gd, redis, zlib, opcache, mcrypt
        ini-values: |
          post_max_size=8M,
          memory_limit=768M,
          max_execution_time=10000,
          always_populate_raw_post_data=-1,
          error_reporting=E_ALL,
          log_errors=on,
          error_log=${{ github.workspace }}/php-errors.log,
          display_errors=on,
          allow_url_fopen=on,
          zend.exception_ignore_args=Off,
          mysqli.allow_local_infile=On,
          opcache.enable=0
        tools: composer:v2
        coverage:  ${{ inputs.coverage }}

    - name: Setup Node
      if: inputs.node-version != '' && inputs.plugin-name == ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    # Caching doesn't work for plugins as older Matomo releases might not have contained a lock file
    - name: Setup Node
      if: inputs.node-version != '' && inputs.plugin-name != ''
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: "Add PHPUnit matcher"
      if: inputs.test-type == 'PluginTests'
      shell: bash
      run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    # setup apache etc
    - name: checkout matomo for plugin builds
      shell: bash
      run: ${{ github.action_path }}/scripts/bash/checkout_matomo.sh
      if: inputs.plugin-name != ''
      env:
        PLUGIN_NAME: ${{ inputs.plugin-name }}
        WORKSPACE: ${{ github.workspace }}
        ACTION_PATH: ${{ github.action_path }}
        MATOMO_TEST_TARGET: ${{ inputs.matomo-test-branch }}
        TEST_SUITE: ${{ inputs.test-type }}

    - name: Get composer cache directory
      id: composer-cache
      shell: bash
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      working-directory: ${{ github.workspace }}/matomo

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-${{ inputs.php-version }}

    - name: prepare setup
      shell: bash
      run: ${{ github.action_path }}/scripts/bash/prepare.sh
      env:
        PHP_VERSION: ${{ inputs.php-version }}
        TEST_SUITE: ${{ inputs.test-type }}
        MATOMO_TEST_TARGET: ${{ inputs.matomo-test-branch }}
        MYSQL_ADAPTER: ${{ inputs.mysql-driver }}
        MYSQL_ENGINE: ${{ inputs.mysql-engine }}
        PLUGIN_NAME: ${{ inputs.plugin-name }}
        WORKSPACE: ${{ github.workspace }}
        ACTION_PATH: ${{ github.action_path }}
        COVERAGE: ${{ inputs.coverage }}
        COVERAGE_HTML_REPORT: ${{ inputs.coverage-html-report }}

    - name: checkout additional plugins
      if: inputs.dependent-plugins != ''
      shell: bash
      run: ${{ github.action_path }}/scripts/bash/checkout_dependent_plugins.sh
      working-directory: ${{ github.workspace }}/matomo
      env:
        DEPENDENT_PLUGINS: ${{ inputs.dependent-plugins }}
        GITHUB_USER_TOKEN: ${{ inputs.github-token }}
        TARGET_BRANCH: ${{ github.base_ref || github.ref_name }}

    - name: run additional setup script
      if: inputs.setup-script != ''
      shell: bash
      run: ${{ github.workspace }}/${{ inputs.setup-script }}
      working-directory: ${{ github.workspace }}/matomo
      env:
        PHP_VERSION: ${{ inputs.php-version }}
        TEST_SUITE: ${{ inputs.test-type }}
        MATOMO_TEST_TARGET: ${{ inputs.matomo-test-branch }}
        PLUGIN_NAME: ${{ inputs.plugin-name }}
        WORKSPACE: ${{ github.workspace }}
        ACTION_PATH: ${{ github.action_path }}
        COVERAGE: ${{ inputs.coverage }}
        COVERAGE_HTML_REPORT: ${{ inputs.coverage-html-report }}

    - name: Install needed packages
      shell: bash
      run: sudo apt-get install ripgrep ttf-mscorefonts-installer imagemagick imagemagick-doc
      working-directory: ${{ github.workspace }}/matomo

    - name: Run tests
      working-directory: ${{ github.workspace }}/matomo
      shell: bash
      run: ${{ github.action_path }}/scripts/bash/run_tests.sh
      env:
        TEST_SUITE: ${{ inputs.test-type }}
        PLUGIN_NAME: ${{ inputs.plugin-name }}
        UITEST_EXTRA_OPTIONS: ${{ inputs.ui-test-options }}
        PHPUNIT_EXTRA_OPTIONS: ${{ inputs.phpunit-test-options }}
        GITHUB_BRANCH: ${{ github.head_ref || github.ref_name }}
        GITHUB_IS_TRIGGERED_BY_PUSH: ${{ github.event_name == 'push' && 'true' || 'false' }}
        MYSQL_ADAPTER: ${{ inputs.mysql-driver }}
        MYSQL_ENGINE: ${{ inputs.mysql-engine }}
        COVERAGE: ${{ inputs.coverage }}
        COVERAGE_HTML_REPORT: ${{ inputs.coverage-html-report }}

    - name: Debug informations
      if: ${{ inputs.debug_mode == 'true' }}
      working-directory: ${{ github.workspace }}/matomo
      shell: bash
      run: |
        echo "::group::PHP configuration"
        php -i || true
        echo "::endgroup::"
        echo "::group::Matomo configuration file"
        cat config/config.ini.php || true
        echo "::endgroup::"
        echo "::group::Matomo error log file"
        cat tmp/logs/matomo.log || true
        echo "::endgroup::"
        echo "::group::PHP error log file"
        cat ${{ github.workspace }}/php-errors.log || true
        echo "::endgroup::"

    - name: Upload Code Coverage HTML Report
      if: ${{ inputs.coverage-html-report == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: html-report
        path: ${{ github.workspace }}/html_report
        include-hidden-files: true
